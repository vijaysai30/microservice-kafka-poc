spring.application.name=Stock-Service
server.port=8085
spring.kafka.consumer.bootstrap-servers : localhost:9092
spring.kafka.consumer.group-id : stock
spring.kafka.consumer.auto-offset-reset : earliest
spring.kafka.consumer.key-deserializer : org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class : org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages : org.example.stockservice.dto
spring.kafka.consumer.properties.spring.json.use.type.headers =false
#spring.kafka.consumer.properties.spring.json.value.default.type=org.example.stockservice.dto.OrderEvent

spring.kafka.topic.name : order-topics

spring.datasource.url=jdbc:mysql://localhost:3306/stock_service_db

# ? JDBC Driver (modern)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ? Database credentials
spring.datasource.username=root
spring.datasource.password=password

# ? JPA dialect for MySQL
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# ? Optional: auto-create tables based on entities
spring.jpa.hibernate.ddl-auto=update

# ? Optional: show SQL in logs (for debugging)
spring.jpa.show-sql=true